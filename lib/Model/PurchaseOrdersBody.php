<?php
/**
 * PurchaseOrdersBody
 *
 * PHP version 5
 *
 * @category Class
 * @package  VereTech\SyncroMSP_PHPclient\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Syncro
 *
 * Welcome to the official Syncro API Docs.  To use these docs, you will need an active Syncro account. You can sign up for one here: [Syncro](https://syncromsp.com)  If you already have an active account, fill in your subdomain below and then click \"Authorize\" and fill in your api-key. The key is specific to your user account so it is found on the your user profile page.  Please review the [API License Agreement](https://syncromsp.com/syncromsp-api-license-agreement/) before using our API. By accessing our API, you are agreeing to the API License Agreement.  Please note there is a rate limit of 180 requests per minute per IP address on API Usage.
 *
 * OpenAPI spec version: v1
 * Contact: help@syncromsp.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.36
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace VereTech\SyncroMSP_PHPclient\Client\Model;

use \ArrayAccess;
use \VereTech\SyncroMSP_PHPclient\Client\ObjectSerializer;

/**
 * PurchaseOrdersBody Class Doc Comment
 *
 * @category Class
 * @package  VereTech\SyncroMSP_PHPclient\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PurchaseOrdersBody implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'purchase_orders_body';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'discount_percent' => 'int',
'expected_date' => '\DateTime',
'general_notes' => 'string',
'other_cents' => 'int',
'shipping_cents' => 'int',
'shipping_notes' => 'string',
'user_id' => 'int',
'vendor_id' => 'int',
'location_id' => 'int',
'due_date' => '\DateTime',
'paid_date' => '\DateTime',
'order_date' => '\DateTime',
'delivery_tracking' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'discount_percent' => null,
'expected_date' => 'date-time',
'general_notes' => null,
'other_cents' => null,
'shipping_cents' => null,
'shipping_notes' => null,
'user_id' => null,
'vendor_id' => null,
'location_id' => null,
'due_date' => 'date-time',
'paid_date' => 'date-time',
'order_date' => 'date-time',
'delivery_tracking' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'discount_percent' => 'discount_percent',
'expected_date' => 'expected_date',
'general_notes' => 'general_notes',
'other_cents' => 'other_cents',
'shipping_cents' => 'shipping_cents',
'shipping_notes' => 'shipping_notes',
'user_id' => 'user_id',
'vendor_id' => 'vendor_id',
'location_id' => 'location_id',
'due_date' => 'due_date',
'paid_date' => 'paid_date',
'order_date' => 'order_date',
'delivery_tracking' => 'delivery_tracking'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'discount_percent' => 'setDiscountPercent',
'expected_date' => 'setExpectedDate',
'general_notes' => 'setGeneralNotes',
'other_cents' => 'setOtherCents',
'shipping_cents' => 'setShippingCents',
'shipping_notes' => 'setShippingNotes',
'user_id' => 'setUserId',
'vendor_id' => 'setVendorId',
'location_id' => 'setLocationId',
'due_date' => 'setDueDate',
'paid_date' => 'setPaidDate',
'order_date' => 'setOrderDate',
'delivery_tracking' => 'setDeliveryTracking'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'discount_percent' => 'getDiscountPercent',
'expected_date' => 'getExpectedDate',
'general_notes' => 'getGeneralNotes',
'other_cents' => 'getOtherCents',
'shipping_cents' => 'getShippingCents',
'shipping_notes' => 'getShippingNotes',
'user_id' => 'getUserId',
'vendor_id' => 'getVendorId',
'location_id' => 'getLocationId',
'due_date' => 'getDueDate',
'paid_date' => 'getPaidDate',
'order_date' => 'getOrderDate',
'delivery_tracking' => 'getDeliveryTracking'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['discount_percent'] = isset($data['discount_percent']) ? $data['discount_percent'] : null;
        $this->container['expected_date'] = isset($data['expected_date']) ? $data['expected_date'] : null;
        $this->container['general_notes'] = isset($data['general_notes']) ? $data['general_notes'] : null;
        $this->container['other_cents'] = isset($data['other_cents']) ? $data['other_cents'] : null;
        $this->container['shipping_cents'] = isset($data['shipping_cents']) ? $data['shipping_cents'] : null;
        $this->container['shipping_notes'] = isset($data['shipping_notes']) ? $data['shipping_notes'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['vendor_id'] = isset($data['vendor_id']) ? $data['vendor_id'] : null;
        $this->container['location_id'] = isset($data['location_id']) ? $data['location_id'] : null;
        $this->container['due_date'] = isset($data['due_date']) ? $data['due_date'] : null;
        $this->container['paid_date'] = isset($data['paid_date']) ? $data['paid_date'] : null;
        $this->container['order_date'] = isset($data['order_date']) ? $data['order_date'] : null;
        $this->container['delivery_tracking'] = isset($data['delivery_tracking']) ? $data['delivery_tracking'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets discount_percent
     *
     * @return int
     */
    public function getDiscountPercent()
    {
        return $this->container['discount_percent'];
    }

    /**
     * Sets discount_percent
     *
     * @param int $discount_percent discount_percent
     *
     * @return $this
     */
    public function setDiscountPercent($discount_percent)
    {
        $this->container['discount_percent'] = $discount_percent;

        return $this;
    }

    /**
     * Gets expected_date
     *
     * @return \DateTime
     */
    public function getExpectedDate()
    {
        return $this->container['expected_date'];
    }

    /**
     * Sets expected_date
     *
     * @param \DateTime $expected_date expected_date
     *
     * @return $this
     */
    public function setExpectedDate($expected_date)
    {
        $this->container['expected_date'] = $expected_date;

        return $this;
    }

    /**
     * Gets general_notes
     *
     * @return string
     */
    public function getGeneralNotes()
    {
        return $this->container['general_notes'];
    }

    /**
     * Sets general_notes
     *
     * @param string $general_notes general_notes
     *
     * @return $this
     */
    public function setGeneralNotes($general_notes)
    {
        $this->container['general_notes'] = $general_notes;

        return $this;
    }

    /**
     * Gets other_cents
     *
     * @return int
     */
    public function getOtherCents()
    {
        return $this->container['other_cents'];
    }

    /**
     * Sets other_cents
     *
     * @param int $other_cents other_cents
     *
     * @return $this
     */
    public function setOtherCents($other_cents)
    {
        $this->container['other_cents'] = $other_cents;

        return $this;
    }

    /**
     * Gets shipping_cents
     *
     * @return int
     */
    public function getShippingCents()
    {
        return $this->container['shipping_cents'];
    }

    /**
     * Sets shipping_cents
     *
     * @param int $shipping_cents shipping_cents
     *
     * @return $this
     */
    public function setShippingCents($shipping_cents)
    {
        $this->container['shipping_cents'] = $shipping_cents;

        return $this;
    }

    /**
     * Gets shipping_notes
     *
     * @return string
     */
    public function getShippingNotes()
    {
        return $this->container['shipping_notes'];
    }

    /**
     * Sets shipping_notes
     *
     * @param string $shipping_notes shipping_notes
     *
     * @return $this
     */
    public function setShippingNotes($shipping_notes)
    {
        $this->container['shipping_notes'] = $shipping_notes;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return int
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param int $user_id user_id
     *
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets vendor_id
     *
     * @return int
     */
    public function getVendorId()
    {
        return $this->container['vendor_id'];
    }

    /**
     * Sets vendor_id
     *
     * @param int $vendor_id vendor_id
     *
     * @return $this
     */
    public function setVendorId($vendor_id)
    {
        $this->container['vendor_id'] = $vendor_id;

        return $this;
    }

    /**
     * Gets location_id
     *
     * @return int
     */
    public function getLocationId()
    {
        return $this->container['location_id'];
    }

    /**
     * Sets location_id
     *
     * @param int $location_id location_id
     *
     * @return $this
     */
    public function setLocationId($location_id)
    {
        $this->container['location_id'] = $location_id;

        return $this;
    }

    /**
     * Gets due_date
     *
     * @return \DateTime
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     *
     * @param \DateTime $due_date due_date
     *
     * @return $this
     */
    public function setDueDate($due_date)
    {
        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets paid_date
     *
     * @return \DateTime
     */
    public function getPaidDate()
    {
        return $this->container['paid_date'];
    }

    /**
     * Sets paid_date
     *
     * @param \DateTime $paid_date paid_date
     *
     * @return $this
     */
    public function setPaidDate($paid_date)
    {
        $this->container['paid_date'] = $paid_date;

        return $this;
    }

    /**
     * Gets order_date
     *
     * @return \DateTime
     */
    public function getOrderDate()
    {
        return $this->container['order_date'];
    }

    /**
     * Sets order_date
     *
     * @param \DateTime $order_date order_date
     *
     * @return $this
     */
    public function setOrderDate($order_date)
    {
        $this->container['order_date'] = $order_date;

        return $this;
    }

    /**
     * Gets delivery_tracking
     *
     * @return string
     */
    public function getDeliveryTracking()
    {
        return $this->container['delivery_tracking'];
    }

    /**
     * Sets delivery_tracking
     *
     * @param string $delivery_tracking delivery_tracking
     *
     * @return $this
     */
    public function setDeliveryTracking($delivery_tracking)
    {
        $this->container['delivery_tracking'] = $delivery_tracking;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
