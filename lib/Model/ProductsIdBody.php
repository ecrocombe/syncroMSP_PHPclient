<?php
/**
 * ProductsIdBody
 *
 * PHP version 5
 *
 * @category Class
 * @package  VereTech\SyncroMSP_PHPclient\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Syncro
 *
 * Welcome to the official Syncro API Docs.  To use these docs, you will need an active Syncro account. You can sign up for one here: [Syncro](https://syncromsp.com)  If you already have an active account, fill in your subdomain below and then click \"Authorize\" and fill in your api-key. The key is specific to your user account so it is found on the your user profile page.  Please review the [API License Agreement](https://syncromsp.com/syncromsp-api-license-agreement/) before using our API. By accessing our API, you are agreeing to the API License Agreement.  Please note there is a rate limit of 180 requests per minute per IP address on API Usage.
 *
 * OpenAPI spec version: v1
 * Contact: help@syncromsp.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.36
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace VereTech\SyncroMSP_PHPclient\Client\Model;

use \ArrayAccess;
use \VereTech\SyncroMSP_PHPclient\Client\ObjectSerializer;

/**
 * ProductsIdBody Class Doc Comment
 *
 * @category Class
 * @package  VereTech\SyncroMSP_PHPclient\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProductsIdBody implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'products_id_body';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'price_cost' => 'float',
'price_retail' => 'float',
'condition' => 'string',
'description' => 'string',
'maintain_stock' => 'bool',
'name' => 'string',
'quantity' => 'int',
'warranty' => 'string',
'sort_order' => 'int',
'reorder_at' => 'int',
'disabled' => 'bool',
'taxable' => 'bool',
'product_category' => 'string',
'upc_code' => 'string',
'discount_percent' => 'float',
'warranty_template_id' => 'int',
'qb_item_id' => 'int',
'desired_stock_level' => 'int',
'price_wholesale' => 'float',
'notes' => 'string',
'tax_rate_id' => 'int',
'vendor_ids' => 'int[]',
'physical_location' => 'string',
'serialized' => 'bool',
'category_ids' => 'int[]',
'product_skus_attributes' => '\VereTech\SyncroMSP_PHPclient\Client\Model\ProductsidProductSkusAttributes[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'price_cost' => null,
'price_retail' => null,
'condition' => null,
'description' => null,
'maintain_stock' => null,
'name' => null,
'quantity' => null,
'warranty' => null,
'sort_order' => null,
'reorder_at' => null,
'disabled' => null,
'taxable' => null,
'product_category' => null,
'upc_code' => null,
'discount_percent' => null,
'warranty_template_id' => null,
'qb_item_id' => null,
'desired_stock_level' => null,
'price_wholesale' => null,
'notes' => null,
'tax_rate_id' => null,
'vendor_ids' => null,
'physical_location' => null,
'serialized' => null,
'category_ids' => null,
'product_skus_attributes' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'price_cost' => 'price_cost',
'price_retail' => 'price_retail',
'condition' => 'condition',
'description' => 'description',
'maintain_stock' => 'maintain_stock',
'name' => 'name',
'quantity' => 'quantity',
'warranty' => 'warranty',
'sort_order' => 'sort_order',
'reorder_at' => 'reorder_at',
'disabled' => 'disabled',
'taxable' => 'taxable',
'product_category' => 'product_category',
'upc_code' => 'upc_code',
'discount_percent' => 'discount_percent',
'warranty_template_id' => 'warranty_template_id',
'qb_item_id' => 'qb_item_id',
'desired_stock_level' => 'desired_stock_level',
'price_wholesale' => 'price_wholesale',
'notes' => 'notes',
'tax_rate_id' => 'tax_rate_id',
'vendor_ids' => 'vendor_ids',
'physical_location' => 'physical_location',
'serialized' => 'serialized',
'category_ids' => 'category_ids',
'product_skus_attributes' => 'product_skus_attributes'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'price_cost' => 'setPriceCost',
'price_retail' => 'setPriceRetail',
'condition' => 'setCondition',
'description' => 'setDescription',
'maintain_stock' => 'setMaintainStock',
'name' => 'setName',
'quantity' => 'setQuantity',
'warranty' => 'setWarranty',
'sort_order' => 'setSortOrder',
'reorder_at' => 'setReorderAt',
'disabled' => 'setDisabled',
'taxable' => 'setTaxable',
'product_category' => 'setProductCategory',
'upc_code' => 'setUpcCode',
'discount_percent' => 'setDiscountPercent',
'warranty_template_id' => 'setWarrantyTemplateId',
'qb_item_id' => 'setQbItemId',
'desired_stock_level' => 'setDesiredStockLevel',
'price_wholesale' => 'setPriceWholesale',
'notes' => 'setNotes',
'tax_rate_id' => 'setTaxRateId',
'vendor_ids' => 'setVendorIds',
'physical_location' => 'setPhysicalLocation',
'serialized' => 'setSerialized',
'category_ids' => 'setCategoryIds',
'product_skus_attributes' => 'setProductSkusAttributes'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'price_cost' => 'getPriceCost',
'price_retail' => 'getPriceRetail',
'condition' => 'getCondition',
'description' => 'getDescription',
'maintain_stock' => 'getMaintainStock',
'name' => 'getName',
'quantity' => 'getQuantity',
'warranty' => 'getWarranty',
'sort_order' => 'getSortOrder',
'reorder_at' => 'getReorderAt',
'disabled' => 'getDisabled',
'taxable' => 'getTaxable',
'product_category' => 'getProductCategory',
'upc_code' => 'getUpcCode',
'discount_percent' => 'getDiscountPercent',
'warranty_template_id' => 'getWarrantyTemplateId',
'qb_item_id' => 'getQbItemId',
'desired_stock_level' => 'getDesiredStockLevel',
'price_wholesale' => 'getPriceWholesale',
'notes' => 'getNotes',
'tax_rate_id' => 'getTaxRateId',
'vendor_ids' => 'getVendorIds',
'physical_location' => 'getPhysicalLocation',
'serialized' => 'getSerialized',
'category_ids' => 'getCategoryIds',
'product_skus_attributes' => 'getProductSkusAttributes'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['price_cost'] = isset($data['price_cost']) ? $data['price_cost'] : null;
        $this->container['price_retail'] = isset($data['price_retail']) ? $data['price_retail'] : null;
        $this->container['condition'] = isset($data['condition']) ? $data['condition'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['maintain_stock'] = isset($data['maintain_stock']) ? $data['maintain_stock'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['warranty'] = isset($data['warranty']) ? $data['warranty'] : null;
        $this->container['sort_order'] = isset($data['sort_order']) ? $data['sort_order'] : null;
        $this->container['reorder_at'] = isset($data['reorder_at']) ? $data['reorder_at'] : null;
        $this->container['disabled'] = isset($data['disabled']) ? $data['disabled'] : null;
        $this->container['taxable'] = isset($data['taxable']) ? $data['taxable'] : null;
        $this->container['product_category'] = isset($data['product_category']) ? $data['product_category'] : null;
        $this->container['upc_code'] = isset($data['upc_code']) ? $data['upc_code'] : null;
        $this->container['discount_percent'] = isset($data['discount_percent']) ? $data['discount_percent'] : null;
        $this->container['warranty_template_id'] = isset($data['warranty_template_id']) ? $data['warranty_template_id'] : null;
        $this->container['qb_item_id'] = isset($data['qb_item_id']) ? $data['qb_item_id'] : null;
        $this->container['desired_stock_level'] = isset($data['desired_stock_level']) ? $data['desired_stock_level'] : null;
        $this->container['price_wholesale'] = isset($data['price_wholesale']) ? $data['price_wholesale'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['tax_rate_id'] = isset($data['tax_rate_id']) ? $data['tax_rate_id'] : null;
        $this->container['vendor_ids'] = isset($data['vendor_ids']) ? $data['vendor_ids'] : null;
        $this->container['physical_location'] = isset($data['physical_location']) ? $data['physical_location'] : null;
        $this->container['serialized'] = isset($data['serialized']) ? $data['serialized'] : null;
        $this->container['category_ids'] = isset($data['category_ids']) ? $data['category_ids'] : null;
        $this->container['product_skus_attributes'] = isset($data['product_skus_attributes']) ? $data['product_skus_attributes'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets price_cost
     *
     * @return float
     */
    public function getPriceCost()
    {
        return $this->container['price_cost'];
    }

    /**
     * Sets price_cost
     *
     * @param float $price_cost price_cost
     *
     * @return $this
     */
    public function setPriceCost($price_cost)
    {
        $this->container['price_cost'] = $price_cost;

        return $this;
    }

    /**
     * Gets price_retail
     *
     * @return float
     */
    public function getPriceRetail()
    {
        return $this->container['price_retail'];
    }

    /**
     * Sets price_retail
     *
     * @param float $price_retail price_retail
     *
     * @return $this
     */
    public function setPriceRetail($price_retail)
    {
        $this->container['price_retail'] = $price_retail;

        return $this;
    }

    /**
     * Gets condition
     *
     * @return string
     */
    public function getCondition()
    {
        return $this->container['condition'];
    }

    /**
     * Sets condition
     *
     * @param string $condition condition
     *
     * @return $this
     */
    public function setCondition($condition)
    {
        $this->container['condition'] = $condition;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets maintain_stock
     *
     * @return bool
     */
    public function getMaintainStock()
    {
        return $this->container['maintain_stock'];
    }

    /**
     * Sets maintain_stock
     *
     * @param bool $maintain_stock maintain_stock
     *
     * @return $this
     */
    public function setMaintainStock($maintain_stock)
    {
        $this->container['maintain_stock'] = $maintain_stock;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int $quantity quantity
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets warranty
     *
     * @return string
     */
    public function getWarranty()
    {
        return $this->container['warranty'];
    }

    /**
     * Sets warranty
     *
     * @param string $warranty warranty
     *
     * @return $this
     */
    public function setWarranty($warranty)
    {
        $this->container['warranty'] = $warranty;

        return $this;
    }

    /**
     * Gets sort_order
     *
     * @return int
     */
    public function getSortOrder()
    {
        return $this->container['sort_order'];
    }

    /**
     * Sets sort_order
     *
     * @param int $sort_order sort_order
     *
     * @return $this
     */
    public function setSortOrder($sort_order)
    {
        $this->container['sort_order'] = $sort_order;

        return $this;
    }

    /**
     * Gets reorder_at
     *
     * @return int
     */
    public function getReorderAt()
    {
        return $this->container['reorder_at'];
    }

    /**
     * Sets reorder_at
     *
     * @param int $reorder_at reorder_at
     *
     * @return $this
     */
    public function setReorderAt($reorder_at)
    {
        $this->container['reorder_at'] = $reorder_at;

        return $this;
    }

    /**
     * Gets disabled
     *
     * @return bool
     */
    public function getDisabled()
    {
        return $this->container['disabled'];
    }

    /**
     * Sets disabled
     *
     * @param bool $disabled disabled
     *
     * @return $this
     */
    public function setDisabled($disabled)
    {
        $this->container['disabled'] = $disabled;

        return $this;
    }

    /**
     * Gets taxable
     *
     * @return bool
     */
    public function getTaxable()
    {
        return $this->container['taxable'];
    }

    /**
     * Sets taxable
     *
     * @param bool $taxable taxable
     *
     * @return $this
     */
    public function setTaxable($taxable)
    {
        $this->container['taxable'] = $taxable;

        return $this;
    }

    /**
     * Gets product_category
     *
     * @return string
     */
    public function getProductCategory()
    {
        return $this->container['product_category'];
    }

    /**
     * Sets product_category
     *
     * @param string $product_category product_category
     *
     * @return $this
     */
    public function setProductCategory($product_category)
    {
        $this->container['product_category'] = $product_category;

        return $this;
    }

    /**
     * Gets upc_code
     *
     * @return string
     */
    public function getUpcCode()
    {
        return $this->container['upc_code'];
    }

    /**
     * Sets upc_code
     *
     * @param string $upc_code upc_code
     *
     * @return $this
     */
    public function setUpcCode($upc_code)
    {
        $this->container['upc_code'] = $upc_code;

        return $this;
    }

    /**
     * Gets discount_percent
     *
     * @return float
     */
    public function getDiscountPercent()
    {
        return $this->container['discount_percent'];
    }

    /**
     * Sets discount_percent
     *
     * @param float $discount_percent discount_percent
     *
     * @return $this
     */
    public function setDiscountPercent($discount_percent)
    {
        $this->container['discount_percent'] = $discount_percent;

        return $this;
    }

    /**
     * Gets warranty_template_id
     *
     * @return int
     */
    public function getWarrantyTemplateId()
    {
        return $this->container['warranty_template_id'];
    }

    /**
     * Sets warranty_template_id
     *
     * @param int $warranty_template_id warranty_template_id
     *
     * @return $this
     */
    public function setWarrantyTemplateId($warranty_template_id)
    {
        $this->container['warranty_template_id'] = $warranty_template_id;

        return $this;
    }

    /**
     * Gets qb_item_id
     *
     * @return int
     */
    public function getQbItemId()
    {
        return $this->container['qb_item_id'];
    }

    /**
     * Sets qb_item_id
     *
     * @param int $qb_item_id qb_item_id
     *
     * @return $this
     */
    public function setQbItemId($qb_item_id)
    {
        $this->container['qb_item_id'] = $qb_item_id;

        return $this;
    }

    /**
     * Gets desired_stock_level
     *
     * @return int
     */
    public function getDesiredStockLevel()
    {
        return $this->container['desired_stock_level'];
    }

    /**
     * Sets desired_stock_level
     *
     * @param int $desired_stock_level desired_stock_level
     *
     * @return $this
     */
    public function setDesiredStockLevel($desired_stock_level)
    {
        $this->container['desired_stock_level'] = $desired_stock_level;

        return $this;
    }

    /**
     * Gets price_wholesale
     *
     * @return float
     */
    public function getPriceWholesale()
    {
        return $this->container['price_wholesale'];
    }

    /**
     * Sets price_wholesale
     *
     * @param float $price_wholesale price_wholesale
     *
     * @return $this
     */
    public function setPriceWholesale($price_wholesale)
    {
        $this->container['price_wholesale'] = $price_wholesale;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string $notes notes
     *
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets tax_rate_id
     *
     * @return int
     */
    public function getTaxRateId()
    {
        return $this->container['tax_rate_id'];
    }

    /**
     * Sets tax_rate_id
     *
     * @param int $tax_rate_id tax_rate_id
     *
     * @return $this
     */
    public function setTaxRateId($tax_rate_id)
    {
        $this->container['tax_rate_id'] = $tax_rate_id;

        return $this;
    }

    /**
     * Gets vendor_ids
     *
     * @return int[]
     */
    public function getVendorIds()
    {
        return $this->container['vendor_ids'];
    }

    /**
     * Sets vendor_ids
     *
     * @param int[] $vendor_ids vendor_ids
     *
     * @return $this
     */
    public function setVendorIds($vendor_ids)
    {
        $this->container['vendor_ids'] = $vendor_ids;

        return $this;
    }

    /**
     * Gets physical_location
     *
     * @return string
     */
    public function getPhysicalLocation()
    {
        return $this->container['physical_location'];
    }

    /**
     * Sets physical_location
     *
     * @param string $physical_location physical_location
     *
     * @return $this
     */
    public function setPhysicalLocation($physical_location)
    {
        $this->container['physical_location'] = $physical_location;

        return $this;
    }

    /**
     * Gets serialized
     *
     * @return bool
     */
    public function getSerialized()
    {
        return $this->container['serialized'];
    }

    /**
     * Sets serialized
     *
     * @param bool $serialized serialized
     *
     * @return $this
     */
    public function setSerialized($serialized)
    {
        $this->container['serialized'] = $serialized;

        return $this;
    }

    /**
     * Gets category_ids
     *
     * @return int[]
     */
    public function getCategoryIds()
    {
        return $this->container['category_ids'];
    }

    /**
     * Sets category_ids
     *
     * @param int[] $category_ids category_ids
     *
     * @return $this
     */
    public function setCategoryIds($category_ids)
    {
        $this->container['category_ids'] = $category_ids;

        return $this;
    }

    /**
     * Gets product_skus_attributes
     *
     * @return \VereTech\SyncroMSP_PHPclient\Client\Model\ProductsidProductSkusAttributes[]
     */
    public function getProductSkusAttributes()
    {
        return $this->container['product_skus_attributes'];
    }

    /**
     * Sets product_skus_attributes
     *
     * @param \VereTech\SyncroMSP_PHPclient\Client\Model\ProductsidProductSkusAttributes[] $product_skus_attributes product_skus_attributes
     *
     * @return $this
     */
    public function setProductSkusAttributes($product_skus_attributes)
    {
        $this->container['product_skus_attributes'] = $product_skus_attributes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
