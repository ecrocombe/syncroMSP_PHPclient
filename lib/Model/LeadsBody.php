<?php
/**
 * LeadsBody
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Syncro
 *
 * Welcome to the official Syncro API Docs.  To use these docs, you will need an active Syncro account. You can sign up for one here: [Syncro](https://syncromsp.com)  If you already have an active account, fill in your subdomain below and then click \"Authorize\" and fill in your api-key. The key is specific to your user account so it is found on the your user profile page.  Please review the [API License Agreement](https://syncromsp.com/syncromsp-api-license-agreement/) before using our API. By accessing our API, you are agreeing to the API License Agreement.  Please note there is a rate limit of 180 requests per minute per IP address on API Usage.
 *
 * OpenAPI spec version: v1
 * Contact: help@syncromsp.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.36
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace VereTech\SyncroMSP_PHPclient\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * LeadsBody Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LeadsBody implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'leads_body';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'address' => 'string',
'business_name' => 'string',
'city' => 'string',
'zip' => 'string',
'converted' => 'bool',
'message_read' => 'bool',
'disabled' => 'bool',
'email' => 'string',
'first_name' => 'string',
'last_name' => 'string',
'mobile' => 'string',
'phone' => 'string',
'state' => 'string',
'ticket_description' => 'string',
'ticket_problem_type' => 'string',
'ticket_subject' => 'string',
'location_id' => 'int',
'from_check_in' => 'bool',
'customer_id' => 'int',
'ticket_id' => 'int',
'hidden_notes' => 'string',
'contact_id' => 'int',
'appointment_time' => 'string',
'status' => 'string',
'user_id' => 'int',
'ticket_type_id' => 'int',
'mailbox_id' => 'int',
'opportunity_start_date' => '\DateTime',
'opportunity_amount_dollars' => 'float',
'likelihood' => 'int',
'properties' => 'object',
'ticket_properties' => 'object',
'customer_purchase_id' => 'int',
'signature_date' => '\DateTime',
'signature_name' => 'string',
'signature_data' => 'string',
'appointment_type_id' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'address' => null,
'business_name' => null,
'city' => null,
'zip' => null,
'converted' => null,
'message_read' => null,
'disabled' => null,
'email' => null,
'first_name' => null,
'last_name' => null,
'mobile' => null,
'phone' => null,
'state' => null,
'ticket_description' => null,
'ticket_problem_type' => null,
'ticket_subject' => null,
'location_id' => null,
'from_check_in' => null,
'customer_id' => null,
'ticket_id' => null,
'hidden_notes' => null,
'contact_id' => null,
'appointment_time' => null,
'status' => null,
'user_id' => null,
'ticket_type_id' => null,
'mailbox_id' => null,
'opportunity_start_date' => 'date-time',
'opportunity_amount_dollars' => null,
'likelihood' => null,
'properties' => null,
'ticket_properties' => null,
'customer_purchase_id' => null,
'signature_date' => 'date-time',
'signature_name' => null,
'signature_data' => null,
'appointment_type_id' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'address' => 'address',
'business_name' => 'business_name',
'city' => 'city',
'zip' => 'zip',
'converted' => 'converted',
'message_read' => 'message_read',
'disabled' => 'disabled',
'email' => 'email',
'first_name' => 'first_name',
'last_name' => 'last_name',
'mobile' => 'mobile',
'phone' => 'phone',
'state' => 'state',
'ticket_description' => 'ticket_description',
'ticket_problem_type' => 'ticket_problem_type',
'ticket_subject' => 'ticket_subject',
'location_id' => 'location_id',
'from_check_in' => 'from_check_in',
'customer_id' => 'customer_id',
'ticket_id' => 'ticket_id',
'hidden_notes' => 'hidden_notes',
'contact_id' => 'contact_id',
'appointment_time' => 'appointment_time',
'status' => 'status',
'user_id' => 'user_id',
'ticket_type_id' => 'ticket_type_id',
'mailbox_id' => 'mailbox_id',
'opportunity_start_date' => 'opportunity_start_date',
'opportunity_amount_dollars' => 'opportunity_amount_dollars',
'likelihood' => 'likelihood',
'properties' => 'properties',
'ticket_properties' => 'ticket_properties',
'customer_purchase_id' => 'customer_purchase_id',
'signature_date' => 'signature_date',
'signature_name' => 'signature_name',
'signature_data' => 'signature_data',
'appointment_type_id' => 'appointment_type_id'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'address' => 'setAddress',
'business_name' => 'setBusinessName',
'city' => 'setCity',
'zip' => 'setZip',
'converted' => 'setConverted',
'message_read' => 'setMessageRead',
'disabled' => 'setDisabled',
'email' => 'setEmail',
'first_name' => 'setFirstName',
'last_name' => 'setLastName',
'mobile' => 'setMobile',
'phone' => 'setPhone',
'state' => 'setState',
'ticket_description' => 'setTicketDescription',
'ticket_problem_type' => 'setTicketProblemType',
'ticket_subject' => 'setTicketSubject',
'location_id' => 'setLocationId',
'from_check_in' => 'setFromCheckIn',
'customer_id' => 'setCustomerId',
'ticket_id' => 'setTicketId',
'hidden_notes' => 'setHiddenNotes',
'contact_id' => 'setContactId',
'appointment_time' => 'setAppointmentTime',
'status' => 'setStatus',
'user_id' => 'setUserId',
'ticket_type_id' => 'setTicketTypeId',
'mailbox_id' => 'setMailboxId',
'opportunity_start_date' => 'setOpportunityStartDate',
'opportunity_amount_dollars' => 'setOpportunityAmountDollars',
'likelihood' => 'setLikelihood',
'properties' => 'setProperties',
'ticket_properties' => 'setTicketProperties',
'customer_purchase_id' => 'setCustomerPurchaseId',
'signature_date' => 'setSignatureDate',
'signature_name' => 'setSignatureName',
'signature_data' => 'setSignatureData',
'appointment_type_id' => 'setAppointmentTypeId'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'address' => 'getAddress',
'business_name' => 'getBusinessName',
'city' => 'getCity',
'zip' => 'getZip',
'converted' => 'getConverted',
'message_read' => 'getMessageRead',
'disabled' => 'getDisabled',
'email' => 'getEmail',
'first_name' => 'getFirstName',
'last_name' => 'getLastName',
'mobile' => 'getMobile',
'phone' => 'getPhone',
'state' => 'getState',
'ticket_description' => 'getTicketDescription',
'ticket_problem_type' => 'getTicketProblemType',
'ticket_subject' => 'getTicketSubject',
'location_id' => 'getLocationId',
'from_check_in' => 'getFromCheckIn',
'customer_id' => 'getCustomerId',
'ticket_id' => 'getTicketId',
'hidden_notes' => 'getHiddenNotes',
'contact_id' => 'getContactId',
'appointment_time' => 'getAppointmentTime',
'status' => 'getStatus',
'user_id' => 'getUserId',
'ticket_type_id' => 'getTicketTypeId',
'mailbox_id' => 'getMailboxId',
'opportunity_start_date' => 'getOpportunityStartDate',
'opportunity_amount_dollars' => 'getOpportunityAmountDollars',
'likelihood' => 'getLikelihood',
'properties' => 'getProperties',
'ticket_properties' => 'getTicketProperties',
'customer_purchase_id' => 'getCustomerPurchaseId',
'signature_date' => 'getSignatureDate',
'signature_name' => 'getSignatureName',
'signature_data' => 'getSignatureData',
'appointment_type_id' => 'getAppointmentTypeId'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['business_name'] = isset($data['business_name']) ? $data['business_name'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['zip'] = isset($data['zip']) ? $data['zip'] : null;
        $this->container['converted'] = isset($data['converted']) ? $data['converted'] : null;
        $this->container['message_read'] = isset($data['message_read']) ? $data['message_read'] : null;
        $this->container['disabled'] = isset($data['disabled']) ? $data['disabled'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['mobile'] = isset($data['mobile']) ? $data['mobile'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['ticket_description'] = isset($data['ticket_description']) ? $data['ticket_description'] : null;
        $this->container['ticket_problem_type'] = isset($data['ticket_problem_type']) ? $data['ticket_problem_type'] : null;
        $this->container['ticket_subject'] = isset($data['ticket_subject']) ? $data['ticket_subject'] : null;
        $this->container['location_id'] = isset($data['location_id']) ? $data['location_id'] : null;
        $this->container['from_check_in'] = isset($data['from_check_in']) ? $data['from_check_in'] : null;
        $this->container['customer_id'] = isset($data['customer_id']) ? $data['customer_id'] : null;
        $this->container['ticket_id'] = isset($data['ticket_id']) ? $data['ticket_id'] : null;
        $this->container['hidden_notes'] = isset($data['hidden_notes']) ? $data['hidden_notes'] : null;
        $this->container['contact_id'] = isset($data['contact_id']) ? $data['contact_id'] : null;
        $this->container['appointment_time'] = isset($data['appointment_time']) ? $data['appointment_time'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['ticket_type_id'] = isset($data['ticket_type_id']) ? $data['ticket_type_id'] : null;
        $this->container['mailbox_id'] = isset($data['mailbox_id']) ? $data['mailbox_id'] : null;
        $this->container['opportunity_start_date'] = isset($data['opportunity_start_date']) ? $data['opportunity_start_date'] : null;
        $this->container['opportunity_amount_dollars'] = isset($data['opportunity_amount_dollars']) ? $data['opportunity_amount_dollars'] : null;
        $this->container['likelihood'] = isset($data['likelihood']) ? $data['likelihood'] : null;
        $this->container['properties'] = isset($data['properties']) ? $data['properties'] : null;
        $this->container['ticket_properties'] = isset($data['ticket_properties']) ? $data['ticket_properties'] : null;
        $this->container['customer_purchase_id'] = isset($data['customer_purchase_id']) ? $data['customer_purchase_id'] : null;
        $this->container['signature_date'] = isset($data['signature_date']) ? $data['signature_date'] : null;
        $this->container['signature_name'] = isset($data['signature_name']) ? $data['signature_name'] : null;
        $this->container['signature_data'] = isset($data['signature_data']) ? $data['signature_data'] : null;
        $this->container['appointment_type_id'] = isset($data['appointment_type_id']) ? $data['appointment_type_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets address
     *
     * @return string
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets business_name
     *
     * @return string
     */
    public function getBusinessName()
    {
        return $this->container['business_name'];
    }

    /**
     * Sets business_name
     *
     * @param string $business_name business_name
     *
     * @return $this
     */
    public function setBusinessName($business_name)
    {
        $this->container['business_name'] = $business_name;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city city
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets zip
     *
     * @return string
     */
    public function getZip()
    {
        return $this->container['zip'];
    }

    /**
     * Sets zip
     *
     * @param string $zip zip
     *
     * @return $this
     */
    public function setZip($zip)
    {
        $this->container['zip'] = $zip;

        return $this;
    }

    /**
     * Gets converted
     *
     * @return bool
     */
    public function getConverted()
    {
        return $this->container['converted'];
    }

    /**
     * Sets converted
     *
     * @param bool $converted converted
     *
     * @return $this
     */
    public function setConverted($converted)
    {
        $this->container['converted'] = $converted;

        return $this;
    }

    /**
     * Gets message_read
     *
     * @return bool
     */
    public function getMessageRead()
    {
        return $this->container['message_read'];
    }

    /**
     * Sets message_read
     *
     * @param bool $message_read message_read
     *
     * @return $this
     */
    public function setMessageRead($message_read)
    {
        $this->container['message_read'] = $message_read;

        return $this;
    }

    /**
     * Gets disabled
     *
     * @return bool
     */
    public function getDisabled()
    {
        return $this->container['disabled'];
    }

    /**
     * Sets disabled
     *
     * @param bool $disabled disabled
     *
     * @return $this
     */
    public function setDisabled($disabled)
    {
        $this->container['disabled'] = $disabled;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name first_name
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name last_name
     *
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets mobile
     *
     * @return string
     */
    public function getMobile()
    {
        return $this->container['mobile'];
    }

    /**
     * Sets mobile
     *
     * @param string $mobile mobile
     *
     * @return $this
     */
    public function setMobile($mobile)
    {
        $this->container['mobile'] = $mobile;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string $phone phone
     *
     * @return $this
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state state
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets ticket_description
     *
     * @return string
     */
    public function getTicketDescription()
    {
        return $this->container['ticket_description'];
    }

    /**
     * Sets ticket_description
     *
     * @param string $ticket_description ticket_description
     *
     * @return $this
     */
    public function setTicketDescription($ticket_description)
    {
        $this->container['ticket_description'] = $ticket_description;

        return $this;
    }

    /**
     * Gets ticket_problem_type
     *
     * @return string
     */
    public function getTicketProblemType()
    {
        return $this->container['ticket_problem_type'];
    }

    /**
     * Sets ticket_problem_type
     *
     * @param string $ticket_problem_type ticket_problem_type
     *
     * @return $this
     */
    public function setTicketProblemType($ticket_problem_type)
    {
        $this->container['ticket_problem_type'] = $ticket_problem_type;

        return $this;
    }

    /**
     * Gets ticket_subject
     *
     * @return string
     */
    public function getTicketSubject()
    {
        return $this->container['ticket_subject'];
    }

    /**
     * Sets ticket_subject
     *
     * @param string $ticket_subject ticket_subject
     *
     * @return $this
     */
    public function setTicketSubject($ticket_subject)
    {
        $this->container['ticket_subject'] = $ticket_subject;

        return $this;
    }

    /**
     * Gets location_id
     *
     * @return int
     */
    public function getLocationId()
    {
        return $this->container['location_id'];
    }

    /**
     * Sets location_id
     *
     * @param int $location_id location_id
     *
     * @return $this
     */
    public function setLocationId($location_id)
    {
        $this->container['location_id'] = $location_id;

        return $this;
    }

    /**
     * Gets from_check_in
     *
     * @return bool
     */
    public function getFromCheckIn()
    {
        return $this->container['from_check_in'];
    }

    /**
     * Sets from_check_in
     *
     * @param bool $from_check_in from_check_in
     *
     * @return $this
     */
    public function setFromCheckIn($from_check_in)
    {
        $this->container['from_check_in'] = $from_check_in;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return int
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param int $customer_id customer_id
     *
     * @return $this
     */
    public function setCustomerId($customer_id)
    {
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets ticket_id
     *
     * @return int
     */
    public function getTicketId()
    {
        return $this->container['ticket_id'];
    }

    /**
     * Sets ticket_id
     *
     * @param int $ticket_id ticket_id
     *
     * @return $this
     */
    public function setTicketId($ticket_id)
    {
        $this->container['ticket_id'] = $ticket_id;

        return $this;
    }

    /**
     * Gets hidden_notes
     *
     * @return string
     */
    public function getHiddenNotes()
    {
        return $this->container['hidden_notes'];
    }

    /**
     * Sets hidden_notes
     *
     * @param string $hidden_notes hidden_notes
     *
     * @return $this
     */
    public function setHiddenNotes($hidden_notes)
    {
        $this->container['hidden_notes'] = $hidden_notes;

        return $this;
    }

    /**
     * Gets contact_id
     *
     * @return int
     */
    public function getContactId()
    {
        return $this->container['contact_id'];
    }

    /**
     * Sets contact_id
     *
     * @param int $contact_id contact_id
     *
     * @return $this
     */
    public function setContactId($contact_id)
    {
        $this->container['contact_id'] = $contact_id;

        return $this;
    }

    /**
     * Gets appointment_time
     *
     * @return string
     */
    public function getAppointmentTime()
    {
        return $this->container['appointment_time'];
    }

    /**
     * Sets appointment_time
     *
     * @param string $appointment_time appointment_time
     *
     * @return $this
     */
    public function setAppointmentTime($appointment_time)
    {
        $this->container['appointment_time'] = $appointment_time;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return int
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param int $user_id user_id
     *
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets ticket_type_id
     *
     * @return int
     */
    public function getTicketTypeId()
    {
        return $this->container['ticket_type_id'];
    }

    /**
     * Sets ticket_type_id
     *
     * @param int $ticket_type_id ticket_type_id
     *
     * @return $this
     */
    public function setTicketTypeId($ticket_type_id)
    {
        $this->container['ticket_type_id'] = $ticket_type_id;

        return $this;
    }

    /**
     * Gets mailbox_id
     *
     * @return int
     */
    public function getMailboxId()
    {
        return $this->container['mailbox_id'];
    }

    /**
     * Sets mailbox_id
     *
     * @param int $mailbox_id mailbox_id
     *
     * @return $this
     */
    public function setMailboxId($mailbox_id)
    {
        $this->container['mailbox_id'] = $mailbox_id;

        return $this;
    }

    /**
     * Gets opportunity_start_date
     *
     * @return \DateTime
     */
    public function getOpportunityStartDate()
    {
        return $this->container['opportunity_start_date'];
    }

    /**
     * Sets opportunity_start_date
     *
     * @param \DateTime $opportunity_start_date opportunity_start_date
     *
     * @return $this
     */
    public function setOpportunityStartDate($opportunity_start_date)
    {
        $this->container['opportunity_start_date'] = $opportunity_start_date;

        return $this;
    }

    /**
     * Gets opportunity_amount_dollars
     *
     * @return float
     */
    public function getOpportunityAmountDollars()
    {
        return $this->container['opportunity_amount_dollars'];
    }

    /**
     * Sets opportunity_amount_dollars
     *
     * @param float $opportunity_amount_dollars opportunity_amount_dollars
     *
     * @return $this
     */
    public function setOpportunityAmountDollars($opportunity_amount_dollars)
    {
        $this->container['opportunity_amount_dollars'] = $opportunity_amount_dollars;

        return $this;
    }

    /**
     * Gets likelihood
     *
     * @return int
     */
    public function getLikelihood()
    {
        return $this->container['likelihood'];
    }

    /**
     * Sets likelihood
     *
     * @param int $likelihood likelihood
     *
     * @return $this
     */
    public function setLikelihood($likelihood)
    {
        $this->container['likelihood'] = $likelihood;

        return $this;
    }

    /**
     * Gets properties
     *
     * @return object
     */
    public function getProperties()
    {
        return $this->container['properties'];
    }

    /**
     * Sets properties
     *
     * @param object $properties properties
     *
     * @return $this
     */
    public function setProperties($properties)
    {
        $this->container['properties'] = $properties;

        return $this;
    }

    /**
     * Gets ticket_properties
     *
     * @return object
     */
    public function getTicketProperties()
    {
        return $this->container['ticket_properties'];
    }

    /**
     * Sets ticket_properties
     *
     * @param object $ticket_properties ticket_properties
     *
     * @return $this
     */
    public function setTicketProperties($ticket_properties)
    {
        $this->container['ticket_properties'] = $ticket_properties;

        return $this;
    }

    /**
     * Gets customer_purchase_id
     *
     * @return int
     */
    public function getCustomerPurchaseId()
    {
        return $this->container['customer_purchase_id'];
    }

    /**
     * Sets customer_purchase_id
     *
     * @param int $customer_purchase_id customer_purchase_id
     *
     * @return $this
     */
    public function setCustomerPurchaseId($customer_purchase_id)
    {
        $this->container['customer_purchase_id'] = $customer_purchase_id;

        return $this;
    }

    /**
     * Gets signature_date
     *
     * @return \DateTime
     */
    public function getSignatureDate()
    {
        return $this->container['signature_date'];
    }

    /**
     * Sets signature_date
     *
     * @param \DateTime $signature_date signature_date
     *
     * @return $this
     */
    public function setSignatureDate($signature_date)
    {
        $this->container['signature_date'] = $signature_date;

        return $this;
    }

    /**
     * Gets signature_name
     *
     * @return string
     */
    public function getSignatureName()
    {
        return $this->container['signature_name'];
    }

    /**
     * Sets signature_name
     *
     * @param string $signature_name signature_name
     *
     * @return $this
     */
    public function setSignatureName($signature_name)
    {
        $this->container['signature_name'] = $signature_name;

        return $this;
    }

    /**
     * Gets signature_data
     *
     * @return string
     */
    public function getSignatureData()
    {
        return $this->container['signature_data'];
    }

    /**
     * Sets signature_data
     *
     * @param string $signature_data signature_data
     *
     * @return $this
     */
    public function setSignatureData($signature_data)
    {
        $this->container['signature_data'] = $signature_data;

        return $this;
    }

    /**
     * Gets appointment_type_id
     *
     * @return int
     */
    public function getAppointmentTypeId()
    {
        return $this->container['appointment_type_id'];
    }

    /**
     * Sets appointment_type_id
     *
     * @param int $appointment_type_id appointment_type_id
     *
     * @return $this
     */
    public function setAppointmentTypeId($appointment_type_id)
    {
        $this->container['appointment_type_id'] = $appointment_type_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
