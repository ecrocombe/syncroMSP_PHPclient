<?php
/**
 * InvoicesBody
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Syncro
 *
 * Welcome to the official Syncro API Docs.  To use these docs, you will need an active Syncro account. You can sign up for one here: [Syncro](https://syncromsp.com)  If you already have an active account, fill in your subdomain below and then click \"Authorize\" and fill in your api-key. The key is specific to your user account so it is found on the your user profile page.  Please review the [API License Agreement](https://syncromsp.com/syncromsp-api-license-agreement/) before using our API. By accessing our API, you are agreeing to the API License Agreement.  Please note there is a rate limit of 180 requests per minute per IP address on API Usage.
 *
 * OpenAPI spec version: v1
 * Contact: help@syncromsp.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.36
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace VereTech\SyncroMSP_PHPclient\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InvoicesBody Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InvoicesBody implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'invoices_body';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'balance_due' => 'int',
'customer_id' => 'int',
'number' => 'string',
'date' => '\DateTime',
'customer_business_then_name' => 'string',
'created_at' => '\DateTime',
'updated_at' => '\DateTime',
'due_date' => '\DateTime',
'subtotal' => 'string',
'total' => 'string',
'tax' => 'string',
'verified_paid' => 'bool',
'tech_marked_paid' => 'bool',
'ticket_id' => 'int',
'pdf_url' => 'string',
'is_paid' => 'bool',
'location_id' => 'int',
'po_number' => 'string',
'contact_id' => 'int',
'note' => 'string',
'hardwarecost' => 'float',
'line_items' => '\Swagger\Client\Model\InvoicesLineItems[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'balance_due' => null,
'customer_id' => null,
'number' => null,
'date' => 'date-time',
'customer_business_then_name' => null,
'created_at' => 'date-time',
'updated_at' => 'date-time',
'due_date' => 'date',
'subtotal' => null,
'total' => null,
'tax' => null,
'verified_paid' => null,
'tech_marked_paid' => null,
'ticket_id' => null,
'pdf_url' => null,
'is_paid' => null,
'location_id' => null,
'po_number' => null,
'contact_id' => null,
'note' => null,
'hardwarecost' => 'number',
'line_items' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'balance_due' => 'balance_due',
'customer_id' => 'customer_id',
'number' => 'number',
'date' => 'date',
'customer_business_then_name' => 'customer_business_then_name',
'created_at' => 'created_at',
'updated_at' => 'updated_at',
'due_date' => 'due_date',
'subtotal' => 'subtotal',
'total' => 'total',
'tax' => 'tax',
'verified_paid' => 'verified_paid',
'tech_marked_paid' => 'tech_marked_paid',
'ticket_id' => 'ticket_id',
'pdf_url' => 'pdf_url',
'is_paid' => 'is_paid',
'location_id' => 'location_id',
'po_number' => 'po_number',
'contact_id' => 'contact_id',
'note' => 'note',
'hardwarecost' => 'hardwarecost',
'line_items' => 'line_items'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'balance_due' => 'setBalanceDue',
'customer_id' => 'setCustomerId',
'number' => 'setNumber',
'date' => 'setDate',
'customer_business_then_name' => 'setCustomerBusinessThenName',
'created_at' => 'setCreatedAt',
'updated_at' => 'setUpdatedAt',
'due_date' => 'setDueDate',
'subtotal' => 'setSubtotal',
'total' => 'setTotal',
'tax' => 'setTax',
'verified_paid' => 'setVerifiedPaid',
'tech_marked_paid' => 'setTechMarkedPaid',
'ticket_id' => 'setTicketId',
'pdf_url' => 'setPdfUrl',
'is_paid' => 'setIsPaid',
'location_id' => 'setLocationId',
'po_number' => 'setPoNumber',
'contact_id' => 'setContactId',
'note' => 'setNote',
'hardwarecost' => 'setHardwarecost',
'line_items' => 'setLineItems'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'balance_due' => 'getBalanceDue',
'customer_id' => 'getCustomerId',
'number' => 'getNumber',
'date' => 'getDate',
'customer_business_then_name' => 'getCustomerBusinessThenName',
'created_at' => 'getCreatedAt',
'updated_at' => 'getUpdatedAt',
'due_date' => 'getDueDate',
'subtotal' => 'getSubtotal',
'total' => 'getTotal',
'tax' => 'getTax',
'verified_paid' => 'getVerifiedPaid',
'tech_marked_paid' => 'getTechMarkedPaid',
'ticket_id' => 'getTicketId',
'pdf_url' => 'getPdfUrl',
'is_paid' => 'getIsPaid',
'location_id' => 'getLocationId',
'po_number' => 'getPoNumber',
'contact_id' => 'getContactId',
'note' => 'getNote',
'hardwarecost' => 'getHardwarecost',
'line_items' => 'getLineItems'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['balance_due'] = isset($data['balance_due']) ? $data['balance_due'] : null;
        $this->container['customer_id'] = isset($data['customer_id']) ? $data['customer_id'] : null;
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['customer_business_then_name'] = isset($data['customer_business_then_name']) ? $data['customer_business_then_name'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['due_date'] = isset($data['due_date']) ? $data['due_date'] : null;
        $this->container['subtotal'] = isset($data['subtotal']) ? $data['subtotal'] : null;
        $this->container['total'] = isset($data['total']) ? $data['total'] : null;
        $this->container['tax'] = isset($data['tax']) ? $data['tax'] : null;
        $this->container['verified_paid'] = isset($data['verified_paid']) ? $data['verified_paid'] : null;
        $this->container['tech_marked_paid'] = isset($data['tech_marked_paid']) ? $data['tech_marked_paid'] : null;
        $this->container['ticket_id'] = isset($data['ticket_id']) ? $data['ticket_id'] : null;
        $this->container['pdf_url'] = isset($data['pdf_url']) ? $data['pdf_url'] : null;
        $this->container['is_paid'] = isset($data['is_paid']) ? $data['is_paid'] : null;
        $this->container['location_id'] = isset($data['location_id']) ? $data['location_id'] : null;
        $this->container['po_number'] = isset($data['po_number']) ? $data['po_number'] : null;
        $this->container['contact_id'] = isset($data['contact_id']) ? $data['contact_id'] : null;
        $this->container['note'] = isset($data['note']) ? $data['note'] : null;
        $this->container['hardwarecost'] = isset($data['hardwarecost']) ? $data['hardwarecost'] : null;
        $this->container['line_items'] = isset($data['line_items']) ? $data['line_items'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['customer_id'] === null) {
            $invalidProperties[] = "'customer_id' can't be null";
        }
        if ($this->container['number'] === null) {
            $invalidProperties[] = "'number' can't be null";
        }
        if ($this->container['date'] === null) {
            $invalidProperties[] = "'date' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets balance_due
     *
     * @return int
     */
    public function getBalanceDue()
    {
        return $this->container['balance_due'];
    }

    /**
     * Sets balance_due
     *
     * @param int $balance_due balance_due
     *
     * @return $this
     */
    public function setBalanceDue($balance_due)
    {
        $this->container['balance_due'] = $balance_due;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return int
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param int $customer_id customer_id
     *
     * @return $this
     */
    public function setCustomerId($customer_id)
    {
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string $number number
     *
     * @return $this
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date date
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets customer_business_then_name
     *
     * @return string
     */
    public function getCustomerBusinessThenName()
    {
        return $this->container['customer_business_then_name'];
    }

    /**
     * Sets customer_business_then_name
     *
     * @param string $customer_business_then_name customer_business_then_name
     *
     * @return $this
     */
    public function setCustomerBusinessThenName($customer_business_then_name)
    {
        $this->container['customer_business_then_name'] = $customer_business_then_name;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at updated_at
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets due_date
     *
     * @return \DateTime
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     *
     * @param \DateTime $due_date due_date
     *
     * @return $this
     */
    public function setDueDate($due_date)
    {
        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets subtotal
     *
     * @return string
     */
    public function getSubtotal()
    {
        return $this->container['subtotal'];
    }

    /**
     * Sets subtotal
     *
     * @param string $subtotal subtotal
     *
     * @return $this
     */
    public function setSubtotal($subtotal)
    {
        $this->container['subtotal'] = $subtotal;

        return $this;
    }

    /**
     * Gets total
     *
     * @return string
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param string $total total
     *
     * @return $this
     */
    public function setTotal($total)
    {
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets tax
     *
     * @return string
     */
    public function getTax()
    {
        return $this->container['tax'];
    }

    /**
     * Sets tax
     *
     * @param string $tax tax
     *
     * @return $this
     */
    public function setTax($tax)
    {
        $this->container['tax'] = $tax;

        return $this;
    }

    /**
     * Gets verified_paid
     *
     * @return bool
     */
    public function getVerifiedPaid()
    {
        return $this->container['verified_paid'];
    }

    /**
     * Sets verified_paid
     *
     * @param bool $verified_paid verified_paid
     *
     * @return $this
     */
    public function setVerifiedPaid($verified_paid)
    {
        $this->container['verified_paid'] = $verified_paid;

        return $this;
    }

    /**
     * Gets tech_marked_paid
     *
     * @return bool
     */
    public function getTechMarkedPaid()
    {
        return $this->container['tech_marked_paid'];
    }

    /**
     * Sets tech_marked_paid
     *
     * @param bool $tech_marked_paid tech_marked_paid
     *
     * @return $this
     */
    public function setTechMarkedPaid($tech_marked_paid)
    {
        $this->container['tech_marked_paid'] = $tech_marked_paid;

        return $this;
    }

    /**
     * Gets ticket_id
     *
     * @return int
     */
    public function getTicketId()
    {
        return $this->container['ticket_id'];
    }

    /**
     * Sets ticket_id
     *
     * @param int $ticket_id ticket_id
     *
     * @return $this
     */
    public function setTicketId($ticket_id)
    {
        $this->container['ticket_id'] = $ticket_id;

        return $this;
    }

    /**
     * Gets pdf_url
     *
     * @return string
     */
    public function getPdfUrl()
    {
        return $this->container['pdf_url'];
    }

    /**
     * Sets pdf_url
     *
     * @param string $pdf_url pdf_url
     *
     * @return $this
     */
    public function setPdfUrl($pdf_url)
    {
        $this->container['pdf_url'] = $pdf_url;

        return $this;
    }

    /**
     * Gets is_paid
     *
     * @return bool
     */
    public function getIsPaid()
    {
        return $this->container['is_paid'];
    }

    /**
     * Sets is_paid
     *
     * @param bool $is_paid is_paid
     *
     * @return $this
     */
    public function setIsPaid($is_paid)
    {
        $this->container['is_paid'] = $is_paid;

        return $this;
    }

    /**
     * Gets location_id
     *
     * @return int
     */
    public function getLocationId()
    {
        return $this->container['location_id'];
    }

    /**
     * Sets location_id
     *
     * @param int $location_id location_id
     *
     * @return $this
     */
    public function setLocationId($location_id)
    {
        $this->container['location_id'] = $location_id;

        return $this;
    }

    /**
     * Gets po_number
     *
     * @return string
     */
    public function getPoNumber()
    {
        return $this->container['po_number'];
    }

    /**
     * Sets po_number
     *
     * @param string $po_number po_number
     *
     * @return $this
     */
    public function setPoNumber($po_number)
    {
        $this->container['po_number'] = $po_number;

        return $this;
    }

    /**
     * Gets contact_id
     *
     * @return int
     */
    public function getContactId()
    {
        return $this->container['contact_id'];
    }

    /**
     * Sets contact_id
     *
     * @param int $contact_id contact_id
     *
     * @return $this
     */
    public function setContactId($contact_id)
    {
        $this->container['contact_id'] = $contact_id;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string $note note
     *
     * @return $this
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets hardwarecost
     *
     * @return float
     */
    public function getHardwarecost()
    {
        return $this->container['hardwarecost'];
    }

    /**
     * Sets hardwarecost
     *
     * @param float $hardwarecost hardwarecost
     *
     * @return $this
     */
    public function setHardwarecost($hardwarecost)
    {
        $this->container['hardwarecost'] = $hardwarecost;

        return $this;
    }

    /**
     * Gets line_items
     *
     * @return \Swagger\Client\Model\InvoicesLineItems[]
     */
    public function getLineItems()
    {
        return $this->container['line_items'];
    }

    /**
     * Sets line_items
     *
     * @param \Swagger\Client\Model\InvoicesLineItems[] $line_items line_items
     *
     * @return $this
     */
    public function setLineItems($line_items)
    {
        $this->container['line_items'] = $line_items;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
