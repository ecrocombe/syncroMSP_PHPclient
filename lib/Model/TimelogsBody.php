<?php
/**
 * TimelogsBody
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Syncro
 *
 * Welcome to the official Syncro API Docs.  To use these docs, you will need an active Syncro account. You can sign up for one here: [Syncro](https://syncromsp.com)  If you already have an active account, fill in your subdomain below and then click \"Authorize\" and fill in your api-key. The key is specific to your user account so it is found on the your user profile page.  Please review the [API License Agreement](https://syncromsp.com/syncromsp-api-license-agreement/) before using our API. By accessing our API, you are agreeing to the API License Agreement.  Please note there is a rate limit of 180 requests per minute per IP address on API Usage.
 *
 * OpenAPI spec version: v1
 * Contact: help@syncromsp.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.36
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace VereTech\SyncroMSP_PHPclient\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TimelogsBody Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TimelogsBody implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'timelogs_body';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'lunch' => 'bool',
'in_at' => '\DateTime',
'out_at' => '\DateTime',
'in_note' => 'string',
'out_note' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'lunch' => null,
'in_at' => 'date-time',
'out_at' => 'date-time',
'in_note' => null,
'out_note' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'lunch' => 'lunch',
'in_at' => 'in_at',
'out_at' => 'out_at',
'in_note' => 'in_note',
'out_note' => 'out_note'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'lunch' => 'setLunch',
'in_at' => 'setInAt',
'out_at' => 'setOutAt',
'in_note' => 'setInNote',
'out_note' => 'setOutNote'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'lunch' => 'getLunch',
'in_at' => 'getInAt',
'out_at' => 'getOutAt',
'in_note' => 'getInNote',
'out_note' => 'getOutNote'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['lunch'] = isset($data['lunch']) ? $data['lunch'] : null;
        $this->container['in_at'] = isset($data['in_at']) ? $data['in_at'] : null;
        $this->container['out_at'] = isset($data['out_at']) ? $data['out_at'] : null;
        $this->container['in_note'] = isset($data['in_note']) ? $data['in_note'] : null;
        $this->container['out_note'] = isset($data['out_note']) ? $data['out_note'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets lunch
     *
     * @return bool
     */
    public function getLunch()
    {
        return $this->container['lunch'];
    }

    /**
     * Sets lunch
     *
     * @param bool $lunch lunch
     *
     * @return $this
     */
    public function setLunch($lunch)
    {
        $this->container['lunch'] = $lunch;

        return $this;
    }

    /**
     * Gets in_at
     *
     * @return \DateTime
     */
    public function getInAt()
    {
        return $this->container['in_at'];
    }

    /**
     * Sets in_at
     *
     * @param \DateTime $in_at in_at
     *
     * @return $this
     */
    public function setInAt($in_at)
    {
        $this->container['in_at'] = $in_at;

        return $this;
    }

    /**
     * Gets out_at
     *
     * @return \DateTime
     */
    public function getOutAt()
    {
        return $this->container['out_at'];
    }

    /**
     * Sets out_at
     *
     * @param \DateTime $out_at out_at
     *
     * @return $this
     */
    public function setOutAt($out_at)
    {
        $this->container['out_at'] = $out_at;

        return $this;
    }

    /**
     * Gets in_note
     *
     * @return string
     */
    public function getInNote()
    {
        return $this->container['in_note'];
    }

    /**
     * Sets in_note
     *
     * @param string $in_note in_note
     *
     * @return $this
     */
    public function setInNote($in_note)
    {
        $this->container['in_note'] = $in_note;

        return $this;
    }

    /**
     * Gets out_note
     *
     * @return string
     */
    public function getOutNote()
    {
        return $this->container['out_note'];
    }

    /**
     * Sets out_note
     *
     * @param string $out_note out_note
     *
     * @return $this
     */
    public function setOutNote($out_note)
    {
        $this->container['out_note'] = $out_note;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
