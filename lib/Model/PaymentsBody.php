<?php
/**
 * PaymentsBody
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Syncro
 *
 * Welcome to the official Syncro API Docs.  To use these docs, you will need an active Syncro account. You can sign up for one here: [Syncro](https://syncromsp.com)  If you already have an active account, fill in your subdomain below and then click \"Authorize\" and fill in your api-key. The key is specific to your user account so it is found on the your user profile page.  Please review the [API License Agreement](https://syncromsp.com/syncromsp-api-license-agreement/) before using our API. By accessing our API, you are agreeing to the API License Agreement.  Please note there is a rate limit of 180 requests per minute per IP address on API Usage.
 *
 * OpenAPI spec version: v1
 * Contact: help@syncromsp.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.36
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace VereTech\SyncroMSP_PHPclient\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PaymentsBody Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PaymentsBody implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'payments_body';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'customer_id' => 'int',
'invoice_id' => 'int',
'invoice_number' => 'string',
'amount_cents' => 'int',
'address_street' => 'string',
'address_city' => 'string',
'address_zip' => 'string',
'payment_method' => 'string',
'ref_num' => 'string',
'register_id' => 'int',
'signature_name' => 'string',
'signature_data' => 'string',
'signature_date' => '\DateTime',
'credit_card_number' => 'string',
'date_month' => 'string',
'date_year' => 'string',
'cvv' => 'string',
'lastname' => 'string',
'firstname' => 'string',
'apply_payments' => 'object'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'customer_id' => null,
'invoice_id' => null,
'invoice_number' => null,
'amount_cents' => null,
'address_street' => null,
'address_city' => null,
'address_zip' => null,
'payment_method' => null,
'ref_num' => null,
'register_id' => null,
'signature_name' => null,
'signature_data' => null,
'signature_date' => 'date-time',
'credit_card_number' => null,
'date_month' => null,
'date_year' => null,
'cvv' => null,
'lastname' => null,
'firstname' => null,
'apply_payments' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'customer_id' => 'customer_id',
'invoice_id' => 'invoice_id',
'invoice_number' => 'invoice_number',
'amount_cents' => 'amount_cents',
'address_street' => 'address_street',
'address_city' => 'address_city',
'address_zip' => 'address_zip',
'payment_method' => 'payment_method',
'ref_num' => 'ref_num',
'register_id' => 'register_id',
'signature_name' => 'signature_name',
'signature_data' => 'signature_data',
'signature_date' => 'signature_date',
'credit_card_number' => 'credit_card_number',
'date_month' => 'date_month',
'date_year' => 'date_year',
'cvv' => 'cvv',
'lastname' => 'lastname',
'firstname' => 'firstname',
'apply_payments' => 'apply_payments'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'customer_id' => 'setCustomerId',
'invoice_id' => 'setInvoiceId',
'invoice_number' => 'setInvoiceNumber',
'amount_cents' => 'setAmountCents',
'address_street' => 'setAddressStreet',
'address_city' => 'setAddressCity',
'address_zip' => 'setAddressZip',
'payment_method' => 'setPaymentMethod',
'ref_num' => 'setRefNum',
'register_id' => 'setRegisterId',
'signature_name' => 'setSignatureName',
'signature_data' => 'setSignatureData',
'signature_date' => 'setSignatureDate',
'credit_card_number' => 'setCreditCardNumber',
'date_month' => 'setDateMonth',
'date_year' => 'setDateYear',
'cvv' => 'setCvv',
'lastname' => 'setLastname',
'firstname' => 'setFirstname',
'apply_payments' => 'setApplyPayments'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'customer_id' => 'getCustomerId',
'invoice_id' => 'getInvoiceId',
'invoice_number' => 'getInvoiceNumber',
'amount_cents' => 'getAmountCents',
'address_street' => 'getAddressStreet',
'address_city' => 'getAddressCity',
'address_zip' => 'getAddressZip',
'payment_method' => 'getPaymentMethod',
'ref_num' => 'getRefNum',
'register_id' => 'getRegisterId',
'signature_name' => 'getSignatureName',
'signature_data' => 'getSignatureData',
'signature_date' => 'getSignatureDate',
'credit_card_number' => 'getCreditCardNumber',
'date_month' => 'getDateMonth',
'date_year' => 'getDateYear',
'cvv' => 'getCvv',
'lastname' => 'getLastname',
'firstname' => 'getFirstname',
'apply_payments' => 'getApplyPayments'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['customer_id'] = isset($data['customer_id']) ? $data['customer_id'] : null;
        $this->container['invoice_id'] = isset($data['invoice_id']) ? $data['invoice_id'] : null;
        $this->container['invoice_number'] = isset($data['invoice_number']) ? $data['invoice_number'] : null;
        $this->container['amount_cents'] = isset($data['amount_cents']) ? $data['amount_cents'] : null;
        $this->container['address_street'] = isset($data['address_street']) ? $data['address_street'] : null;
        $this->container['address_city'] = isset($data['address_city']) ? $data['address_city'] : null;
        $this->container['address_zip'] = isset($data['address_zip']) ? $data['address_zip'] : null;
        $this->container['payment_method'] = isset($data['payment_method']) ? $data['payment_method'] : null;
        $this->container['ref_num'] = isset($data['ref_num']) ? $data['ref_num'] : null;
        $this->container['register_id'] = isset($data['register_id']) ? $data['register_id'] : null;
        $this->container['signature_name'] = isset($data['signature_name']) ? $data['signature_name'] : null;
        $this->container['signature_data'] = isset($data['signature_data']) ? $data['signature_data'] : null;
        $this->container['signature_date'] = isset($data['signature_date']) ? $data['signature_date'] : null;
        $this->container['credit_card_number'] = isset($data['credit_card_number']) ? $data['credit_card_number'] : null;
        $this->container['date_month'] = isset($data['date_month']) ? $data['date_month'] : null;
        $this->container['date_year'] = isset($data['date_year']) ? $data['date_year'] : null;
        $this->container['cvv'] = isset($data['cvv']) ? $data['cvv'] : null;
        $this->container['lastname'] = isset($data['lastname']) ? $data['lastname'] : null;
        $this->container['firstname'] = isset($data['firstname']) ? $data['firstname'] : null;
        $this->container['apply_payments'] = isset($data['apply_payments']) ? $data['apply_payments'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets customer_id
     *
     * @return int
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param int $customer_id customer_id
     *
     * @return $this
     */
    public function setCustomerId($customer_id)
    {
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets invoice_id
     *
     * @return int
     */
    public function getInvoiceId()
    {
        return $this->container['invoice_id'];
    }

    /**
     * Sets invoice_id
     *
     * @param int $invoice_id invoice_id
     *
     * @return $this
     */
    public function setInvoiceId($invoice_id)
    {
        $this->container['invoice_id'] = $invoice_id;

        return $this;
    }

    /**
     * Gets invoice_number
     *
     * @return string
     */
    public function getInvoiceNumber()
    {
        return $this->container['invoice_number'];
    }

    /**
     * Sets invoice_number
     *
     * @param string $invoice_number invoice_number
     *
     * @return $this
     */
    public function setInvoiceNumber($invoice_number)
    {
        $this->container['invoice_number'] = $invoice_number;

        return $this;
    }

    /**
     * Gets amount_cents
     *
     * @return int
     */
    public function getAmountCents()
    {
        return $this->container['amount_cents'];
    }

    /**
     * Sets amount_cents
     *
     * @param int $amount_cents amount_cents
     *
     * @return $this
     */
    public function setAmountCents($amount_cents)
    {
        $this->container['amount_cents'] = $amount_cents;

        return $this;
    }

    /**
     * Gets address_street
     *
     * @return string
     */
    public function getAddressStreet()
    {
        return $this->container['address_street'];
    }

    /**
     * Sets address_street
     *
     * @param string $address_street address_street
     *
     * @return $this
     */
    public function setAddressStreet($address_street)
    {
        $this->container['address_street'] = $address_street;

        return $this;
    }

    /**
     * Gets address_city
     *
     * @return string
     */
    public function getAddressCity()
    {
        return $this->container['address_city'];
    }

    /**
     * Sets address_city
     *
     * @param string $address_city address_city
     *
     * @return $this
     */
    public function setAddressCity($address_city)
    {
        $this->container['address_city'] = $address_city;

        return $this;
    }

    /**
     * Gets address_zip
     *
     * @return string
     */
    public function getAddressZip()
    {
        return $this->container['address_zip'];
    }

    /**
     * Sets address_zip
     *
     * @param string $address_zip address_zip
     *
     * @return $this
     */
    public function setAddressZip($address_zip)
    {
        $this->container['address_zip'] = $address_zip;

        return $this;
    }

    /**
     * Gets payment_method
     *
     * @return string
     */
    public function getPaymentMethod()
    {
        return $this->container['payment_method'];
    }

    /**
     * Sets payment_method
     *
     * @param string $payment_method payment_method
     *
     * @return $this
     */
    public function setPaymentMethod($payment_method)
    {
        $this->container['payment_method'] = $payment_method;

        return $this;
    }

    /**
     * Gets ref_num
     *
     * @return string
     */
    public function getRefNum()
    {
        return $this->container['ref_num'];
    }

    /**
     * Sets ref_num
     *
     * @param string $ref_num ref_num
     *
     * @return $this
     */
    public function setRefNum($ref_num)
    {
        $this->container['ref_num'] = $ref_num;

        return $this;
    }

    /**
     * Gets register_id
     *
     * @return int
     */
    public function getRegisterId()
    {
        return $this->container['register_id'];
    }

    /**
     * Sets register_id
     *
     * @param int $register_id register_id
     *
     * @return $this
     */
    public function setRegisterId($register_id)
    {
        $this->container['register_id'] = $register_id;

        return $this;
    }

    /**
     * Gets signature_name
     *
     * @return string
     */
    public function getSignatureName()
    {
        return $this->container['signature_name'];
    }

    /**
     * Sets signature_name
     *
     * @param string $signature_name signature_name
     *
     * @return $this
     */
    public function setSignatureName($signature_name)
    {
        $this->container['signature_name'] = $signature_name;

        return $this;
    }

    /**
     * Gets signature_data
     *
     * @return string
     */
    public function getSignatureData()
    {
        return $this->container['signature_data'];
    }

    /**
     * Sets signature_data
     *
     * @param string $signature_data signature_data
     *
     * @return $this
     */
    public function setSignatureData($signature_data)
    {
        $this->container['signature_data'] = $signature_data;

        return $this;
    }

    /**
     * Gets signature_date
     *
     * @return \DateTime
     */
    public function getSignatureDate()
    {
        return $this->container['signature_date'];
    }

    /**
     * Sets signature_date
     *
     * @param \DateTime $signature_date signature_date
     *
     * @return $this
     */
    public function setSignatureDate($signature_date)
    {
        $this->container['signature_date'] = $signature_date;

        return $this;
    }

    /**
     * Gets credit_card_number
     *
     * @return string
     */
    public function getCreditCardNumber()
    {
        return $this->container['credit_card_number'];
    }

    /**
     * Sets credit_card_number
     *
     * @param string $credit_card_number credit_card_number
     *
     * @return $this
     */
    public function setCreditCardNumber($credit_card_number)
    {
        $this->container['credit_card_number'] = $credit_card_number;

        return $this;
    }

    /**
     * Gets date_month
     *
     * @return string
     */
    public function getDateMonth()
    {
        return $this->container['date_month'];
    }

    /**
     * Sets date_month
     *
     * @param string $date_month date_month
     *
     * @return $this
     */
    public function setDateMonth($date_month)
    {
        $this->container['date_month'] = $date_month;

        return $this;
    }

    /**
     * Gets date_year
     *
     * @return string
     */
    public function getDateYear()
    {
        return $this->container['date_year'];
    }

    /**
     * Sets date_year
     *
     * @param string $date_year date_year
     *
     * @return $this
     */
    public function setDateYear($date_year)
    {
        $this->container['date_year'] = $date_year;

        return $this;
    }

    /**
     * Gets cvv
     *
     * @return string
     */
    public function getCvv()
    {
        return $this->container['cvv'];
    }

    /**
     * Sets cvv
     *
     * @param string $cvv cvv
     *
     * @return $this
     */
    public function setCvv($cvv)
    {
        $this->container['cvv'] = $cvv;

        return $this;
    }

    /**
     * Gets lastname
     *
     * @return string
     */
    public function getLastname()
    {
        return $this->container['lastname'];
    }

    /**
     * Sets lastname
     *
     * @param string $lastname lastname
     *
     * @return $this
     */
    public function setLastname($lastname)
    {
        $this->container['lastname'] = $lastname;

        return $this;
    }

    /**
     * Gets firstname
     *
     * @return string
     */
    public function getFirstname()
    {
        return $this->container['firstname'];
    }

    /**
     * Sets firstname
     *
     * @param string $firstname firstname
     *
     * @return $this
     */
    public function setFirstname($firstname)
    {
        $this->container['firstname'] = $firstname;

        return $this;
    }

    /**
     * Gets apply_payments
     *
     * @return object
     */
    public function getApplyPayments()
    {
        return $this->container['apply_payments'];
    }

    /**
     * Sets apply_payments
     *
     * @param object $apply_payments Object where a key is an Invoice ID and a value is a payment amount to be applied to the invoice.
     *
     * @return $this
     */
    public function setApplyPayments($apply_payments)
    {
        $this->container['apply_payments'] = $apply_payments;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
